buildscript {
    ext {
        javaVersion = 17
        bootstrapVersion = '5.2.3'
        embeddedMongoVersion = '4.3.3'
        facebook4jVersion = '2.4.13'
        googleApiServicesOAuth2Version = 'v2-rev157-1.25.0'
        jacocoVersion = '0.8.8'
        lombokVersion = '1.18.24'
        springBootVersion = '3.0.1'
        springDependencyManagementPluginVersion = '1.1.0'
        webjarsLocatorVersion = '0.46'
        gradleAggregateJavadocsPluginVersion = '3.0.1'
    }

    repositories {
        mavenCentral()

        maven {
            url 'https://plugins.gradle.org/m2'
        }
    }

    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:${springDependencyManagementPluginVersion}"
        classpath "com.netflix.nebula:gradle-aggregate-javadocs-plugin:${gradleAggregateJavadocsPluginVersion}"
    }
}

apply plugin: 'nebula-aggregate-javadocs'

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'idea'

    group = 'com.github.szgabsz91'
    version = '1.0.0-SNAPSHOT'

    def additionalNameParts = project.rootDir.toPath().relativize(project.projectDir.toPath()).toString().split('/')
    archivesBaseName = "${project.rootProject.name}-${additionalNameParts.join('-')}"

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-Xlint:unchecked'
    }

    jacoco {
        toolVersion = jacocoVersion
    }

    jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = false
            csv.enabled = false
        }
    }
    test.finalizedBy jacocoTestReport

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
        }
    }

    dependencies {
        api 'org.springframework.boot:spring-boot-starter'
        api 'org.springframework.boot:spring-boot-starter-validation'

        implementation "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.projectreactor:reactor-test'
        testImplementation 'org.mockito:mockito-junit-jupiter'
    }
}
